{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yesme\\\\Desktop\\\\hyf-homework\\\\react\\\\week3\\\\my-app\\\\src\\\\render.js\";\nimport React from \"react\";\n\nfunction TodoItem(props) {\n  const editstate = props.todos.editstate;\n  const details = editstate ? /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"update todo\",\n    onChange: () => props.try,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }) : ` ${props.todos.description}  ||  ${props.todos.deadline}`;\n  const isComplete = props.todos.completed;\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    id: \"lists\",\n    style: {\n      textDecoration: isComplete ? \"line-through\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, \" \", details, \" \"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    onChange: props.handelCheckbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: props.deleteTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, \" Delete\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"button\",\n    value: editstate ? \"update\" : \"edit\"\n    /*<button onClick={props.updateTodo}> update </button>*/\n    ,\n    onClick: props.updateTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }));\n}\n\nclass TodoList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      listOfTodos: [],\n      todoName: \"\",\n      deadlineDate: \"\",\n      updateInput: \"\"\n    };\n    this.todoUpdated = this.todoUpdated.bind(this);\n    this.editTodo = this.editTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.handelCheckbox = this.handelCheckbox.bind(this);\n    this.update = this.update.bind(this);\n\n    this.try = () => {\n      console.log(\"hello\");\n    };\n  }\n\n  componentDidMount() {\n    const url = \"https://gist.githubusercontent.com/benna100/391eee7a119b50bd2c5960ab51622532/raw\";\n    fetch(url).then(data => data.json()).then(response => {\n      this.setState({\n        listOfTodos: response.map(item => item)\n      });\n    });\n  }\n\n  addNewTodo(todoName, deadlineDate) {\n    const currentDate = new Date();\n    const selectedDate = new Date(deadlineDate);\n\n    if (todoName === \"\" || deadlineDate === \"\") {\n      alert(\"Input can not be empty\");\n    } else if (selectedDate < currentDate) {\n      alert(\"please make sure your deadline date is correct\");\n    } else {\n      this.setState({\n        listOfTodos: [...this.state.listOfTodos, {\n          description: todoName,\n          completed: false,\n          deadline: deadlineDate\n        }]\n      });\n    }\n  }\n\n  todoUpdated(updateValue) {\n    this.setState({\n      updateInput: updateValue\n    });\n  }\n\n  update(id) {\n    this.setState({\n      listOfTodos: this.state.listOfTodos.map((task, index) => {\n        if (id === index) {\n          console.log(task);\n          return { ...task,\n            description: this.state.updateInput,\n            editstate: !task.editstate\n          };\n        } else {\n          return task;\n        }\n      })\n    });\n  }\n\n  editTodo(id) {\n    this.setState({\n      listOfTodos: this.state.listOfTodos.map((task, index) => {\n        console.log(task);\n\n        if (id === index) {\n          return { ...task,\n            editstate: !task.editstate\n          };\n        } else {\n          return task;\n        }\n      })\n    });\n  }\n\n  handelCheckbox(id) {\n    this.setState({\n      listOfTodos: this.state.listOfTodos.map((task, index) => {\n        if (id === index) {\n          return { ...task,\n            completed: !task.completed\n          };\n        } else {\n          return task;\n        }\n      })\n    });\n  }\n\n  removeTodo(id) {\n    this.setState({\n      listOfTodos: this.state.listOfTodos.filter((item, index) => {\n        return index !== id;\n      })\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, \"TodoList\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }\n    }, this.state.listOfTodos.map((task, index) => {\n      return /*#__PURE__*/React.createElement(TodoItem, {\n        todos: task,\n        key: index,\n        deleteTodo: () => this.removeTodo(index),\n        handelCheckbox: () => this.handelCheckbox(index),\n        editTodo: () => this.editTodo(index),\n        updateTodo: () => this.update(index),\n        todoUpdated: this.todoUpdated,\n        try: this.try,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }\n      });\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => {\n        event.preventDefault();\n        this.addNewTodo(this.state.todoName, this.state.deadlineDate);\n        this.setState({\n          todoName: \"\",\n          deadlineDate: \"\"\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }, \"Todo description :\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"New Todo name\",\n      value: this.state.todoName,\n      onChange: event => {\n        this.setState({\n          todoName: event.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }), \"Deadline :\", \" \", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"date\",\n      placeholder: \"New Deadline Date\",\n      value: this.state.deadlineDate,\n      onChange: event => {\n        this.setState({\n          deadlineDate: event.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, \"Add new todo\"))));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["C:/Users/yesme/Desktop/hyf-homework/react/week3/my-app/src/render.js"],"names":["React","TodoItem","props","editstate","todos","details","try","description","deadline","isComplete","completed","textDecoration","handelCheckbox","deleteTodo","updateTodo","TodoList","Component","state","listOfTodos","todoName","deadlineDate","updateInput","todoUpdated","bind","editTodo","removeTodo","update","console","log","componentDidMount","url","fetch","then","data","json","response","setState","map","item","addNewTodo","currentDate","Date","selectedDate","alert","updateValue","id","task","index","filter","render","event","preventDefault","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nfunction TodoItem(props) {\r\n  const editstate = props.todos.editstate;\r\n\r\n  const details = editstate ? (\r\n    <input type=\"text\" placeholder=\"update todo\" onChange={() => props.try} />\r\n  ) : (\r\n    ` ${props.todos.description}  ||  ${props.todos.deadline}`\r\n  );\r\n\r\n  const isComplete = props.todos.completed;\r\n  return (\r\n    <ul\r\n      id=\"lists\"\r\n      style={{ textDecoration: isComplete ? \"line-through\" : \"none\" }}\r\n    >\r\n      <li> {details} </li>\r\n      <input type=\"checkbox\" onChange={props.handelCheckbox}></input>\r\n      <button onClick={props.deleteTodo}> Delete</button>\r\n      <input\r\n        type=\"button\"\r\n        value={editstate ? \"update\" : \"edit\"}\r\n        /*<button onClick={props.updateTodo}> update </button>*/\r\n        onClick={props.updateTodo}\r\n      />\r\n    </ul>\r\n  );\r\n}\r\n\r\nclass TodoList extends React.Component {\r\n  state = {\r\n    listOfTodos: [],\r\n    todoName: \"\",\r\n    deadlineDate: \"\",\r\n    updateInput: \"\",\r\n  };\r\n  todoUpdated = this.todoUpdated.bind(this);\r\n  editTodo = this.editTodo.bind(this);\r\n  removeTodo = this.removeTodo.bind(this);\r\n  handelCheckbox = this.handelCheckbox.bind(this);\r\n  update = this.update.bind(this);\r\n\r\n  componentDidMount() {\r\n    const url =\r\n      \"https://gist.githubusercontent.com/benna100/391eee7a119b50bd2c5960ab51622532/raw\";\r\n    fetch(url)\r\n      .then((data) => data.json())\r\n      .then((response) => {\r\n        this.setState({\r\n          listOfTodos: response.map((item) => item),\r\n        });\r\n      });\r\n  }\r\n\r\n  addNewTodo(todoName, deadlineDate) {\r\n    const currentDate = new Date();\r\n    const selectedDate = new Date(deadlineDate);\r\n\r\n    if (todoName === \"\" || deadlineDate === \"\") {\r\n      alert(\"Input can not be empty\");\r\n    } else if (selectedDate < currentDate) {\r\n      alert(\"please make sure your deadline date is correct\");\r\n    } else {\r\n      this.setState({\r\n        listOfTodos: [\r\n          ...this.state.listOfTodos,\r\n          {\r\n            description: todoName,\r\n\r\n            completed: false,\r\n            deadline: deadlineDate,\r\n          },\r\n        ],\r\n      });\r\n    }\r\n  }\r\n\r\n  todoUpdated(updateValue) {\r\n    this.setState({ updateInput: updateValue });\r\n  }\r\n\r\n  try = () => {\r\n    console.log(\"hello\");\r\n  };\r\n\r\n  update(id) {\r\n    this.setState({\r\n      listOfTodos: this.state.listOfTodos.map((task, index) => {\r\n        if (id === index) {\r\n          console.log(task);\r\n          return {\r\n            ...task,\r\n            description: this.state.updateInput,\r\n            editstate: !task.editstate,\r\n          };\r\n        } else {\r\n          return task;\r\n        }\r\n      }),\r\n    });\r\n  }\r\n  editTodo(id) {\r\n    this.setState({\r\n      listOfTodos: this.state.listOfTodos.map((task, index) => {\r\n        console.log(task);\r\n        if (id === index) {\r\n          return { ...task, editstate: !task.editstate };\r\n        } else {\r\n          return task;\r\n        }\r\n      }),\r\n    });\r\n  }\r\n\r\n  handelCheckbox(id) {\r\n    this.setState({\r\n      listOfTodos: this.state.listOfTodos.map((task, index) => {\r\n        if (id === index) {\r\n          return { ...task, completed: !task.completed };\r\n        } else {\r\n          return task;\r\n        }\r\n      }),\r\n    });\r\n  }\r\n\r\n  removeTodo(id) {\r\n    this.setState({\r\n      listOfTodos: this.state.listOfTodos.filter((item, index) => {\r\n        return index !== id;\r\n      }),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"display\">\r\n        <h1>TodoList</h1>\r\n\r\n        <ul>\r\n          {this.state.listOfTodos.map((task, index) => {\r\n            return (\r\n              <TodoItem\r\n                todos={task}\r\n                key={index}\r\n                deleteTodo={() => this.removeTodo(index)}\r\n                handelCheckbox={() => this.handelCheckbox(index)}\r\n                editTodo={() => this.editTodo(index)}\r\n                updateTodo={() => this.update(index)}\r\n                todoUpdated={this.todoUpdated}\r\n                try={this.try}\r\n              />\r\n            );\r\n          })}\r\n\r\n          <form\r\n            onSubmit={(event) => {\r\n              event.preventDefault();\r\n\r\n              this.addNewTodo(this.state.todoName, this.state.deadlineDate);\r\n              this.setState({ todoName: \"\", deadlineDate: \"\" });\r\n            }}\r\n          >\r\n            Todo description :{\" \"}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"New Todo name\"\r\n              value={this.state.todoName}\r\n              onChange={(event) => {\r\n                this.setState({\r\n                  todoName: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            Deadline :{\" \"}\r\n            <input\r\n              type=\"date\"\r\n              placeholder=\"New Deadline Date\"\r\n              value={this.state.deadlineDate}\r\n              onChange={(event) => {\r\n                this.setState({\r\n                  deadlineDate: event.target.value,\r\n                });\r\n              }}\r\n            />\r\n            <button type=\"submit\">Add new todo</button>\r\n          </form>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n"]},"metadata":{},"sourceType":"module"}